/*
 * @lc app=leetcode id=202 lang=cpp
 *
 * [202] Happy Number
 *
 * https://leetcode.com/problems/happy-number/description/
 *
 * algorithms
 * Easy (46.82%)
 * Likes:    1093
 * Dislikes: 283
 * Total Accepted:    279.9K
 * Total Submissions: 594.9K
 * Testcase Example:  '19'
 *
 * Write an algorithm to determine if a number is "happy".
 * 
 * A happy number is a number defined by the following process: Starting with
 * any positive integer, replace the number by the sum of the squares of its
 * digits, and repeat the process until the number equals 1 (where it will
 * stay), or it loops endlessly in a cycle which does not include 1. Those
 * numbers for which this process ends in 1 are happy numbers.
 * 
 * Example:Â 
 * 
 * 
 * Input: 19
 * Output: true
 * Explanation: 
 * 1^2 + 9^2 = 82
 * 8^2 + 2^2 = 68
 * 6^2 + 8^2 = 100
 * 1^2 + 0^2 + 0^2 = 1
 * 
 */

// @lc code=start
class Solution {
public:
    bool isHappy(int n) {
        if(n == 1) return true;
        // compute the first number generated by n.
        //int start_num=0;
       // int m = n;
        // while(m){
        //     int r=m%10;
        //     start_num+=r*r;
        //     m/=10;
        // }
        // n = start_num;
        // do{
        //     int t = 0;
        //     while(n){
        //         int r=n%10;
        //         t+=r*r;
        //         n/=10;
        //     }
        //     n = t;
        // }while(n!=1 && n!=start_num);
       
        set<int> s;
        while(n != 1 && s.find(n) == s.end()){
            s.insert(n);
            int t = 0;
            while(n){
                int r = n%10;
                t+=r*r;
                n/=10;
            }
            n=t;
        }
        if(n==1) return true;
        return false;
    }
};
// @lc code=end

